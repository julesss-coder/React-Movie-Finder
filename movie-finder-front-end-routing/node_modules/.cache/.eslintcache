[{"/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/index.js":"1","/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/App.js":"2","/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/reportWebVitals.js":"3","/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/Home.js":"4","/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/utils.js":"5","/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/Movie.js":"6"},{"size":578,"mtime":1659438704638,"results":"7","hashOfConfig":"8"},{"size":773,"mtime":1659544036867,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1659436966218,"results":"10","hashOfConfig":"8"},{"size":4927,"mtime":1659544819075,"results":"11","hashOfConfig":"8"},{"size":585,"mtime":1659438393561,"results":"12","hashOfConfig":"8"},{"size":1709,"mtime":1659544466293,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dxo8d8",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/index.js",[],[],"/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/App.js",["36"],[],"import React from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Home from './Home';\nimport Movie from './Movie';\n\nimport './App.css';\n\nconst NotFound = () => {\n  return <h2>404 Not Found</h2>;\n}\n\nconst App = () => {\n  return (\n    <Router>\n      {/* Commenting out nav. Checking to see if I can add Home link in Home.js instead of App.js. WORKS! */}\n      {/* <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <Link className=\"navbar-brand\" to=\"/\">Movie Finder</Link>\n      </nav> */}\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/movie/:id\" component={Movie} />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/reportWebVitals.js",[],[],[],"/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/Home.js",["37"],[],"import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { json, checkStatus } from './utils';\n\n\n/* ==== MOVIE INPUT COMPONENT ==== */\nfunction MovieInput(props) {\n  let {searchTerm, handleChange, handleSubmit} = props;\n\n  return (\n    <form className=\"row justify-content-start mt-4\">\n      <div className=\"col-0\">\n        {/* Label is necessary for accessability, but I hid it because it looks better that way */}\n        <label htmlFor=\"movie-search\" className=\"visually-hidden\">Movie Search: </label>\n      </div>\n      <div className=\"col-auto\">\n        <input type=\"text\" className=\"movie-search form-control\" id=\"movie-search\" aria-describedby=\"movie-search-help\" value={searchTerm} onChange={handleChange} />\n        <div className=\"form-text\" id=\"movie-search-help\">Search movie by title.</div>\n      </div>\n      <div className=\"col-auto\">\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit}>Search</button>\n      </div>\n    </form>\n  )\n}\n\n/* ==== MOVIES COMPONENT ==== */\nfunction Movies(props) {\n  let {movies} = props;\n\n  return (\n    <div className=\"row mt-5\">\n      {movies.map(movie => {\n        let {Poster, Title, Type, Year, imdbID} = movie;\n          return (\n            <div className=\"individual-movie col-12 col-xl-6 mb-5 pe-lg-1\" key={imdbID}>\n              <div className=\"row\">\n                <div className=\"movie-poster-wrapper col-12 col-sm-7\">\n                  {/* movie poster */}\n                  {/* Linking to the movie page only worked when I added the line below instead of the one underneath it */}\n                  <Link to={`/movie/${imdbID}/`} target=\"_blank\">\n                  {/* <Link to={`https://www.imdb.com/title/${imdbID}/`} target=\"_blank\"> */}\n                    <img className=\"movie-poster d-block mx-auto\" src={Poster} alt={`Movie poster for ${Title}`} />\n                  </Link>\n                </div>\n                <div className=\"movie-description col-10 offset-2 col-sm-5 offset-sm-0 p-3\">\n                  {/* movie description */}\n                  <p className=\"movie-title fs-4\">\n                    Title:&nbsp;\n                    <Link to={`/movie/${imdbID}/`} target=\"_blank\">{Title}</Link> \n                  {/* <Link to={`https://www.imdb.com/title/${imdbID}/`} target=\"_blank\">{Title}</Link> */}\n                  </p>\n                  <p className=\"movie-year-type\">{Type[0].toUpperCase() + Type.slice(1)} &#124; {Year}</p>\n                </div>\n              </div>\n            </div>\n          );\n        }\n      )}\n    </div>\n  );\n}\n\n/* ==== PARENT COMPONENT MOVIEFINDER ==== */\nclass MovieFinder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: '',\n      movieList: [],\n      error: '',\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  handleInputChange(e) {\n    this.setState({searchTerm: e.target.value});\n  }\n\n  handleSubmit(e) {\n    // Without event.preventDefault(), page is re-rendered\n    e.preventDefault();\n    let {searchTerm} = this.state;\n\n    // Remove spaces at start and end of user input. If nothing left, ie if input is empty string, return early\n    if (!searchTerm.trim()) {\n      // Reset searchTerm and input field to ''\n      this.setState({searchTerm: ''});\n      return;\n    }\n\n    fetch(`https://www.omdbapi.com/?apikey=ad74095d&s=${this.state.searchTerm}`)\n      .then(checkStatus)\n      .then(json)\n      .then(data => {\n      if (data.Response === 'False') {\n        throw new Error(data.Error);\n      }\n\n      this.setState({\n        movieList: data.Search,\n        error: '',\n      });\n    }).catch((error) => {\n      this.setState({error: error.message});\n    });\n\n    this.setState({searchTerm: ''});\n  }\n\n\n  render() {\n    let {searchTerm, movieList, error} = this.state;\n\n    return(\n      <div className=\"movie-finder container-fluid\">\n        <div className=\"row mt-3\">\n          <div className=\"col-12\">\n            {/* Checking to see if I can add Home link here instead of App.js. WORKS */}\n            <Link className=\"link-dark\" to=\"/\">\n              <h1>Movie Finder</h1>\n            </Link>\n            {/* Movie Input Component */}\n            <MovieInput searchTerm={searchTerm} handleChange={(e) => this.handleInputChange(e)} handleSubmit={(e) => this.handleSubmit(e)}/> \n          </div>\n        </div>\n  \n        <div className=\"row movie-results mt-4\">\n          <div className=\"col-12\">\n            <h2>Results</h2>\n            <small>Results from <a href=\"https://www.omdbapi.com/\" target=\"_blank\">OMDb API - The Open Movie Database</a>.</small>\n              {/* Error, or Movies Component */}\n              {error ? <p className=\"col-12\">{error}</p> : \n              <Movies movies={movieList} />}\n              \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieFinder;","/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/utils.js",[],[],"/home/julia/1 Projekte/Programmieren/Altcademy/Project_23_MovieFinder/movie-finder-front-end-routing/src/Movie.js",["38"],[],"import React from 'react';\nimport { checkStatus, json } from './utils';\n\nclass Movie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: null,\n    }\n  }\n\n  componentDidMount() {\n    console.log('this.props.match: ', this.props.match);\n    // Access movie ID\n    fetch(`https://www.omdbapi.com/?i=${this.props.match.params.id}&apikey=ad74095d`)\n      .then(checkStatus)\n      .then(json)\n      .then(data => {\n        if (data.Response === 'False') {\n          throw new Error(data.Error);\n        }\n\n        if (data.Response === 'True') {\n          console.log(data);\n          this.setState({movie: data, error: ''});\n        }\n      })\n      .catch(error => {\n        this.setState({error: error.message });\n        console.log(error);\n      })\n  }\n\n  render() {\n    if (!this.state.movie) {\n      return null;\n    }\n\n    const {\n      Title,\n      Year,\n      Plot,\n      Director,\n      imdbRating,\n      Poster,\n    } = this.state.movie;\n\n\n    return (\n      <div className=\"container\">\n        <div className=\"row pt-5\">\n          <div className=\"col-6\">\n            <h1>{Title}</h1>\n            <ul className=\"list-unstyled\">\n              <li>\n                <p>Year: {Year}</p>\n              </li>\n              <li>\n                <p>Director: {Director}</p>\n              </li>\n              <li>\n                <p>Plot: {Plot}</p>\n              </li>\n              <li>\n                <p>imdbRating: {imdbRating} / 10</p>\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-6\">\n            <img src={Poster} className=\"img-fluid\" />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Movie;",{"ruleId":"39","severity":1,"message":"40","line":2,"column":42,"nodeType":"41","messageId":"42","endLine":2,"endColumn":46},{"ruleId":"43","severity":1,"message":"44","line":134,"column":33,"nodeType":"45","messageId":"46","endLine":134,"endColumn":84,"fix":"47"},{"ruleId":"48","severity":1,"message":"49","line":70,"column":13,"nodeType":"45","endLine":70,"endColumn":55},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"50","text":"51"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",[4623,4623]," rel=\"noreferrer\""]